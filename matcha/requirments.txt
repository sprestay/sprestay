1) Аналог тиндер
2) Python (Flask) + MySQL + JavaScript
3) Видео яндекс.диск https://yadi.sk/i/FwVqejoMCPm3kg
4) Регистрация пользователя - 1 страница, через JS отрисовывают содержимое (форма регистрации, форма логина)
  Проверка валидности введеных данных на клиенте, отправка AJAX для проверки на сервере
   Отправка письма с ссылкой для подтверждения регистрации
   После подтверждения регистрации пользователь обязан заполнить инфо о себе (во время логина пользователя мы получаем запись из БД, релевантную пользователю, соответственно знаем, какие поля он заполнил а какие нет)
   После того как пользователь заполнил всю необходимую информацию о себе - он может просматривать профили других пользователей
   Пользователь может фильтровать и сортировать результаты выдачи потенциальных пар
   В БД содержится несколько промежуточных таблиц (отношение многие_ко_многим) (история посещений, лайки, пары, тэги и тд)
   При каждом действии пользователя - действие заносится в БД
   Пользователи, которые лайкнули друг друга попадают в группу matches.
   У них появляется возможность общаться, чат реализован через WebSockets, чтобы общение было в реальном времени.
   Каждые 2 минуты проводится AJAX запрос на сервер, который обновляет время последнего онлайна пользователя, и смотрит, есть ли у пользователя уведомления.
   При первом заходе у пользователя спрашивается разрешение на доступ к геолокации, в случае отказа местоположение определяется по ip
   Так же пользователь может задать свое местоположение вручную
5)
certifi==2019.11.28
chardet==3.0.4
Click==7.0
decorator==4.4.1
Flask==1.1.1
Flask-MySQLdb==0.2.0
Flask-SocketIO==4.2.1
future==0.18.2
geocoder==1.38.1
geographiclib==1.50
geopy==1.20.0
idna==2.8
itsdangerous==1.1.0
Jinja2==2.11.0
MarkupSafe==1.1.1
mysql-connector==2.2.9
mysqlclient==1.4.6
pysyge==1.1.0
python-dateutil==2.8.1
python-engineio==3.11.2
python-socketio==4.4.0
ratelim==0.1.6
requests==2.22.0
six==1.14.0
urllib3==1.25.8
Werkzeug==0.16.1


python main.py
